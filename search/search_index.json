{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cloud4RPi Documentation This website provides documentation for the Cloud4RPi service\u2014a cloud control panel for your IoT projects. Supported Platforms Cloud4RPi communicates with almost any device via the MQTT or HTTP protocol. Detailed instructions and examples are available for the following platforms and languages: Raspberry Pi using Python ( GitHub Repository ) Next Thing Co. C.H.I.P. using Python ( GitHub Repository ) Onion Omega2 using Python ( GitHub Repository ) ESP8266 using MicroPython ( GitHub Repository ) ESP8266 or ESP32 using Arduino ( GitHub Repository ) ESP8266 or ESP32 using PlatformIO ( GitHub Repository ) Note Python 2 and Python 3 are supported. Contact us if your device or preferred language is not listed.","title":"Home"},{"location":"#cloud4rpi-documentation","text":"This website provides documentation for the Cloud4RPi service\u2014a cloud control panel for your IoT projects.","title":"Cloud4RPi Documentation"},{"location":"#supported-platforms","text":"Cloud4RPi communicates with almost any device via the MQTT or HTTP protocol. Detailed instructions and examples are available for the following platforms and languages: Raspberry Pi using Python ( GitHub Repository ) Next Thing Co. C.H.I.P. using Python ( GitHub Repository ) Onion Omega2 using Python ( GitHub Repository ) ESP8266 using MicroPython ( GitHub Repository ) ESP8266 or ESP32 using Arduino ( GitHub Repository ) ESP8266 or ESP32 using PlatformIO ( GitHub Repository ) Note Python 2 and Python 3 are supported. Contact us if your device or preferred language is not listed.","title":"Supported Platforms"},{"location":"client-libraries/","text":"The table below lists download links for the latest versions of the Cloud4RPi client libraries. Platform Version Download Links Python 1.0.1 Github PyPi Arduino 1.0.1 Github Arduino Library List PlatformIO","title":"Client Libraries"},{"location":"faq/","text":"Frequently asked questions and possible issues you can encounter with Cloud4RPi : How to update Cloud4RPi client installation? The Cloud4RPi client library is a PyPI package the pip utility manages. Execute the following command to update the Cloud4RPi client library: sudo pip install --upgrade cloud4rpi What are packets? Packet is a data portion sent from a device to the Cloud4RPi server (using the MQTT or HTTPs protocol). A single packet can include multiple variable values. Diagnostic data transfer is unlimited and does not consume packets. Packet information is displayed at the top right corner of Cloud4RPi pages and in the Pricing Plan category of your account settings . Learn more about the subscription plans in the Plans and Pricing section. Where are the log files? Use one of the following commands to read the logs containing the service's output and errors: less /var/log/cloud4rpi.log \u2014 if your init manager is init and you have left the service name and log path unchanged; sudo journalctl -u cloud4rpi \u2014 if your init manager is systemd and you have not changed the service name . Note Use the ps -p 1 command to see your operating system's init manager. Refer to your init manager's documentation for more information or contact us if it differs from init and systemd . You can also call the following function at the beginning of your script to save the script output. It is useful if you do not run your Cloud4RPi-enabled script as a service: cloud4rpi.set_logging_to_file(YOUR_LOGFILE_PATH) How to use the service installed using the service_install.sh script? The default service's name is cloud4rpi (can be changed in service_install.sh:4 ). You can use the following commands if your init manager is init : sudo service cloud4rpi start|stop|status|restart|uninstall If your init manager is systemd , you can use the same commands except for uninstall . To remove the systemd service, execute the following commands: sudo systemctl stop cloud4rpi.service sudo systemctl disable cloud4rpi.service sudo rm /lib/systemd/system/cloud4rpi.service sudo systemctl daemon-reload How to choose the DATA_SENDING_INTERVAL value? Call device.publish_data() and device.publish_diag() functions frequently to update the monitored variables. The update frequency depends on the variable dynamics, for example, atmospheric conditions do not change every minute. This means the delay between updates for a weather station should be one to ten minutes. You should also consider available packets when choosing the DATA_SENDING_INTERVAL value. If you monitor several variables with different dynamics, the delay between updates should be the shortest. Note The variable update interval does not affect commands, and variable changes made through the Web UI ( Switch or Slider widget) are applied instantly.","title":"FAQ"},{"location":"faq/#how-to-update-cloud4rpi-client-installation","text":"The Cloud4RPi client library is a PyPI package the pip utility manages. Execute the following command to update the Cloud4RPi client library: sudo pip install --upgrade cloud4rpi","title":"How to update Cloud4RPi client installation?"},{"location":"faq/#what-are-packets","text":"Packet is a data portion sent from a device to the Cloud4RPi server (using the MQTT or HTTPs protocol). A single packet can include multiple variable values. Diagnostic data transfer is unlimited and does not consume packets. Packet information is displayed at the top right corner of Cloud4RPi pages and in the Pricing Plan category of your account settings . Learn more about the subscription plans in the Plans and Pricing section.","title":"What are packets?"},{"location":"faq/#where-are-the-log-files","text":"Use one of the following commands to read the logs containing the service's output and errors: less /var/log/cloud4rpi.log \u2014 if your init manager is init and you have left the service name and log path unchanged; sudo journalctl -u cloud4rpi \u2014 if your init manager is systemd and you have not changed the service name . Note Use the ps -p 1 command to see your operating system's init manager. Refer to your init manager's documentation for more information or contact us if it differs from init and systemd . You can also call the following function at the beginning of your script to save the script output. It is useful if you do not run your Cloud4RPi-enabled script as a service: cloud4rpi.set_logging_to_file(YOUR_LOGFILE_PATH)","title":"Where are the log files?"},{"location":"faq/#how-to-use-the-service-installed-using-the-service_installsh-script","text":"The default service's name is cloud4rpi (can be changed in service_install.sh:4 ). You can use the following commands if your init manager is init : sudo service cloud4rpi start|stop|status|restart|uninstall If your init manager is systemd , you can use the same commands except for uninstall . To remove the systemd service, execute the following commands: sudo systemctl stop cloud4rpi.service sudo systemctl disable cloud4rpi.service sudo rm /lib/systemd/system/cloud4rpi.service sudo systemctl daemon-reload","title":"How to use the service installed using the service_install.sh script?"},{"location":"faq/#how-to-choose-the-data_sending_interval-value","text":"Call device.publish_data() and device.publish_diag() functions frequently to update the monitored variables. The update frequency depends on the variable dynamics, for example, atmospheric conditions do not change every minute. This means the delay between updates for a weather station should be one to ten minutes. You should also consider available packets when choosing the DATA_SENDING_INTERVAL value. If you monitor several variables with different dynamics, the delay between updates should be the shortest. Note The variable update interval does not affect commands, and variable changes made through the Web UI ( Switch or Slider widget) are applied instantly.","title":"How to choose the DATA_SENDING_INTERVAL value?"},{"location":"plans-and-pricing/","text":"Plans and Pricing The Free Tier You receive 10k free packets every month. This is enough to send data to the cloud every five minutes for a month. The table below compares different packet spending rates: 1 packet per 5 minutes 1 packet per minute 2 packets per minute 1 hour 12 60 120 24 hours 288 1,440 2,880 1 week 2,016 10,080 20,160 1 month 8,928 44,640 89,280 extra packets required 0 34,640 79,280 Purchase Extra Packets If you need a higher throughput, you can purchase extra packets. These packets are used only when you have no free packets left. To view prices, refer to the Pricing page. The web UI's header displays the number of available packets. You can click it for more information. In the invoked menu, click the Buy more packets button to purchase additional packets: The same functionality is available in the Pricing Plan category of your account settings : Packet Spending Rate You can spend packets at any rate. Unspent free and purchased packets are carried over to the next month. Send Data When Out of Packets If you run out of packets, you can still send data at 1 packet per hour. Control the Spending Rate You can specify a personal spending cap to ensure that you never spend too many packets in rapid succession. To do this, go to your account settings and locate the Pricing Plan category. Use the Packets limit per hour slider to specify the spending cap. The minimum cap is 1 packet an hour\u2014the maximum is unlimited. Set Up Your Device When you write your device's scripts, make sure to send data to the cloud at a rate based on your budget and requirements.","title":"Plans and Pricing"},{"location":"plans-and-pricing/#plans-and-pricing","text":"","title":"Plans and Pricing"},{"location":"plans-and-pricing/#the-free-tier","text":"You receive 10k free packets every month. This is enough to send data to the cloud every five minutes for a month. The table below compares different packet spending rates: 1 packet per 5 minutes 1 packet per minute 2 packets per minute 1 hour 12 60 120 24 hours 288 1,440 2,880 1 week 2,016 10,080 20,160 1 month 8,928 44,640 89,280 extra packets required 0 34,640 79,280","title":"The Free Tier"},{"location":"plans-and-pricing/#purchase-extra-packets","text":"If you need a higher throughput, you can purchase extra packets. These packets are used only when you have no free packets left. To view prices, refer to the Pricing page. The web UI's header displays the number of available packets. You can click it for more information. In the invoked menu, click the Buy more packets button to purchase additional packets: The same functionality is available in the Pricing Plan category of your account settings :","title":"Purchase Extra Packets"},{"location":"plans-and-pricing/#packet-spending-rate","text":"You can spend packets at any rate. Unspent free and purchased packets are carried over to the next month.","title":"Packet Spending Rate"},{"location":"plans-and-pricing/#send-data-when-out-of-packets","text":"If you run out of packets, you can still send data at 1 packet per hour.","title":"Send Data When Out of Packets"},{"location":"plans-and-pricing/#control-the-spending-rate","text":"You can specify a personal spending cap to ensure that you never spend too many packets in rapid succession. To do this, go to your account settings and locate the Pricing Plan category. Use the Packets limit per hour slider to specify the spending cap. The minimum cap is 1 packet an hour\u2014the maximum is unlimited.","title":"Control the Spending Rate"},{"location":"plans-and-pricing/#set-up-your-device","text":"When you write your device's scripts, make sure to send data to the cloud at a rate based on your budget and requirements.","title":"Set Up Your Device"},{"location":"troubleshooting/","text":"I receive installation errors You can get one of the following errors when you use the sudo pip install cloud4rpi command to install the Cloud4RPi client library: InstallationError: Command \"python setup.py egg_info\" failed with error code 1 Error while finding spec for 'pip.__main__' (<class 'ImportError'>: cannot import name 'IncompleteRead'); 'pip' is a package and cannot be directly executed This happens because the setuptools and/or pip packages your Python interpreter uses are outdated. Update the packages with the following command: sudo pip install --upgrade setuptools pip After updating, reinstall cloud4rpi : sudo pip install cloud4rpi Raspberry Pi does not recognize my 1-Wire device Follow the instructions below if you experience issues with the 1-Wire interface on Raspberry Pi. Run sudo raspi-config and make sure that the 1-Wire interface is enabled ( Interfacing Options | 1-Wire menu). Add the dtoverlay=w1-gpio string to your /boot/config.txt file ( echo dtoverlay=w1-gpio | sudo tee -a /boot/config.txt ). Reboot ( sudo reboot command). Double-check the wiring and your device's operational voltage. The 1-Wire DATA bus should be connected to GPIO4 (Pin 7) and pulled-up to VCC . I receive an \"Insecure Platform\" warning The InsecurePlatformWarning: A true SSLContext object is not available... notification appears when you run Cloud4RPi on Python v2.7.9 and earlier. Use the following command to check the Python version: python --version You can use one of the following approaches to install the latest version: I get a WiFi library collision in the Arduino IDE The Multiple libraries were found for \"WiFi.h\" message can appear in Arduino IDE. This indicates the IDE has two libraries with the same name, and it does not know which one to use. To avoid this error, specify the absolute path to the header file in the #include directive, for example: #include <C:\\Users\\user\\Documents\\ArduinoData\\packages\\esp32\\hardware\\esp32\\1.0.2\\libraries\\WiFi\\src\\WiFi.h> You can copy-paste the valid path to both libraries that appear in the error message. Add the src\\ subfolder between the library path and header file name. A control panel widget displays a \"No data found\" error This means that a variable's name was changed on the device. If you revert to the old name or assign the new name the widget, the widget will successfully bind to the variable and retain all its data.","title":"Troubleshooting"},{"location":"troubleshooting/#i-receive-installation-errors","text":"You can get one of the following errors when you use the sudo pip install cloud4rpi command to install the Cloud4RPi client library: InstallationError: Command \"python setup.py egg_info\" failed with error code 1 Error while finding spec for 'pip.__main__' (<class 'ImportError'>: cannot import name 'IncompleteRead'); 'pip' is a package and cannot be directly executed This happens because the setuptools and/or pip packages your Python interpreter uses are outdated. Update the packages with the following command: sudo pip install --upgrade setuptools pip After updating, reinstall cloud4rpi : sudo pip install cloud4rpi","title":"I receive installation errors"},{"location":"troubleshooting/#raspberry-pi-does-not-recognize-my-1-wire-device","text":"Follow the instructions below if you experience issues with the 1-Wire interface on Raspberry Pi. Run sudo raspi-config and make sure that the 1-Wire interface is enabled ( Interfacing Options | 1-Wire menu). Add the dtoverlay=w1-gpio string to your /boot/config.txt file ( echo dtoverlay=w1-gpio | sudo tee -a /boot/config.txt ). Reboot ( sudo reboot command). Double-check the wiring and your device's operational voltage. The 1-Wire DATA bus should be connected to GPIO4 (Pin 7) and pulled-up to VCC .","title":"Raspberry Pi does not recognize my 1-Wire device"},{"location":"troubleshooting/#i-receive-an-insecure-platform-warning","text":"The InsecurePlatformWarning: A true SSLContext object is not available... notification appears when you run Cloud4RPi on Python v2.7.9 and earlier. Use the following command to check the Python version: python --version You can use one of the following approaches to install the latest version:","title":"I receive an \"Insecure Platform\" warning"},{"location":"troubleshooting/#i-get-a-wifi-library-collision-in-the-arduino-ide","text":"The Multiple libraries were found for \"WiFi.h\" message can appear in Arduino IDE. This indicates the IDE has two libraries with the same name, and it does not know which one to use. To avoid this error, specify the absolute path to the header file in the #include directive, for example: #include <C:\\Users\\user\\Documents\\ArduinoData\\packages\\esp32\\hardware\\esp32\\1.0.2\\libraries\\WiFi\\src\\WiFi.h> You can copy-paste the valid path to both libraries that appear in the error message. Add the src\\ subfolder between the library path and header file name.","title":"I get a WiFi library collision in the Arduino IDE"},{"location":"troubleshooting/#a-control-panel-widget-displays-a-no-data-found-error","text":"This means that a variable's name was changed on the device. If you revert to the old name or assign the new name the widget, the widget will successfully bind to the variable and retain all its data.","title":"A control panel widget displays a \"No data found\" error"},{"location":"api/http/","text":"HTTP Protocol API Variables Configuration Updates the device's configuration. Request Destination Method : POST URL : https://cloud4rpi.io/api/devices/{token}/config URL Parameters Name Description token The device token Headers Content-Type: application/json Request Body [ {\"name\": name, \"type\": type}, {\"name\": name, \"type\": type}, // ... {\"name\": name, \"type\": type} ] Parameters Name Description Type Possible Values name Variable name string Any string type Variable type string \"bool\", \"numeric\", \"string\", or \"location\" Example The following example creates two variables on the device: Temperature (numeric) LEDOn (boolean) export DEVICE_TOKEN=your_device_token curl -X POST \\ -H \"Content-Type: application/json\" \\ -d '[{\"name\":\"Temperature\",\"type\":\"numeric\"},{\"name\":\"LEDOn\",\"type\":\"bool\"}]' \\ \"https://cloud4rpi.io/api/devices/$DEVICE_TOKEN/config\" Note Replace your_device_token with your device token displayed on the device page . Response Body { \"message\": \"OK\" } or { \"error\": error_text } Variable Values Sends variable values. Note Before sending variable values, configure variables by sending the Variables Configuration message . Request Destination Method : POST URL : https://cloud4rpi.io/api/devices/{token}/data URL Parameters Name Description token The device token Headers Content-Type: application/json Request Body { \"ts\": datetime_isoformat, \"payload\": { var_name: var_value, var_name: var_value, // ... var_name: var_value } } Parameters Name Description Type Possible Values datetime_isoformat Timestamp (optional) string Time in the ISO 8601 format with the time zone designator specified explicitly var_name Variable name string One of the variables var_value Variable value corresponding Any Note Use the following object to send the location variable values: {\"lat\": latitude_value, \"lng\": longitude_value} , where latitude_value and longitude_value are floating point numbers. Example The following example sends the values of two variables: Temperature : 24 . LEDOn : true . export DEVICE_TOKEN=your_device_token curl -X POST \\ -H \"Content-Type: application/json\" \\ -d '{\"ts\":\"$(date -Is)\",\"payload\":{\"Temperature\":24,\"LEDOn\":true}}' \\ \"https://cloud4rpi.io/api/devices/$DEVICE_TOKEN/data\" Note Replace your_device_token with your device token displayed on the device page . Response Body { \"message\": \"OK\" } or { \"error\": error_text } Diagnostic Data Sends device's diagnostic data. Request Destination Method : POST URL : https://cloud4rpi.io/api/devices/{token}/diagnostics URL Parameters Name Description token The device token Headers Content-Type: application/json Request Body { \"ts\": datetime_isoformat, \"payload\": { var_name: var_value, var_name: var_value, // ... var_name: var_value } } Parameters Name Description Type Possible Values datetime_isoformat Timestamp (optional) string Time in the ISO 8601 format with the time zone designator specified explicitly var_name Variable name string Any var_value Variable value any Any Example The following example sends the following diagnostic values to Cloud4RPi: CPU Temperature : 41 IP Address : 192.168.1.50 export DEVICE_TOKEN=your_device_token curl -X POST \\ -H \"Content-Type: application/json\" \\ -d '{\"ts\":\"$(date -Is)\",\"payload\":{\"CPU Temperature\":41,\"IP Address\":\"192.168.1.50\"}}' \\ \"https://cloud4rpi.io/api/devices/$DEVICE_TOKEN/diagnostics\" Note Replace your_device_token with your device token displayed on the device page . Response Body { \"message\": \"OK\" } or { \"error\": error_text } Commands Queue Acquires the recent commands sent from the Control Panel. Request Destination Method : GET URL : https://cloud4rpi.io/api/devices/{token}/commands/latest URL Parameters Name Description token The device token Example export DEVICE_TOKEN=your_device_token curl -X GET \"https://cloud4rpi.io/api/devices/$DEVICE_TOKEN/commands/latest\" Response Body [ {var_name: var_new_value}, {var_name: var_new_value}, // ... {var_name: var_new_value} ] Parameters Name Description Type Possible Values var_name Variable name string Any var_new_value New variable value corresponding Any The commands are in chronological order.","title":"HTTP Protocol"},{"location":"api/http/#http-protocol-api","text":"","title":"HTTP Protocol API"},{"location":"api/http/#variables-configuration","text":"Updates the device's configuration.","title":"Variables Configuration"},{"location":"api/http/#request-destination","text":"Method : POST URL : https://cloud4rpi.io/api/devices/{token}/config","title":"Request Destination"},{"location":"api/http/#url-parameters","text":"Name Description token The device token","title":"URL Parameters"},{"location":"api/http/#headers","text":"Content-Type: application/json","title":"Headers"},{"location":"api/http/#request-body","text":"[ {\"name\": name, \"type\": type}, {\"name\": name, \"type\": type}, // ... {\"name\": name, \"type\": type} ]","title":"Request Body"},{"location":"api/http/#parameters","text":"Name Description Type Possible Values name Variable name string Any string type Variable type string \"bool\", \"numeric\", \"string\", or \"location\"","title":"Parameters"},{"location":"api/http/#example","text":"The following example creates two variables on the device: Temperature (numeric) LEDOn (boolean) export DEVICE_TOKEN=your_device_token curl -X POST \\ -H \"Content-Type: application/json\" \\ -d '[{\"name\":\"Temperature\",\"type\":\"numeric\"},{\"name\":\"LEDOn\",\"type\":\"bool\"}]' \\ \"https://cloud4rpi.io/api/devices/$DEVICE_TOKEN/config\" Note Replace your_device_token with your device token displayed on the device page .","title":"Example"},{"location":"api/http/#response-body","text":"{ \"message\": \"OK\" } or { \"error\": error_text }","title":"Response Body"},{"location":"api/http/#variable-values","text":"Sends variable values. Note Before sending variable values, configure variables by sending the Variables Configuration message .","title":"Variable Values"},{"location":"api/http/#request-destination_1","text":"Method : POST URL : https://cloud4rpi.io/api/devices/{token}/data","title":"Request Destination"},{"location":"api/http/#url-parameters_1","text":"Name Description token The device token","title":"URL Parameters"},{"location":"api/http/#headers_1","text":"Content-Type: application/json","title":"Headers"},{"location":"api/http/#request-body_1","text":"{ \"ts\": datetime_isoformat, \"payload\": { var_name: var_value, var_name: var_value, // ... var_name: var_value } }","title":"Request Body"},{"location":"api/http/#parameters_1","text":"Name Description Type Possible Values datetime_isoformat Timestamp (optional) string Time in the ISO 8601 format with the time zone designator specified explicitly var_name Variable name string One of the variables var_value Variable value corresponding Any Note Use the following object to send the location variable values: {\"lat\": latitude_value, \"lng\": longitude_value} , where latitude_value and longitude_value are floating point numbers.","title":"Parameters"},{"location":"api/http/#example_1","text":"The following example sends the values of two variables: Temperature : 24 . LEDOn : true . export DEVICE_TOKEN=your_device_token curl -X POST \\ -H \"Content-Type: application/json\" \\ -d '{\"ts\":\"$(date -Is)\",\"payload\":{\"Temperature\":24,\"LEDOn\":true}}' \\ \"https://cloud4rpi.io/api/devices/$DEVICE_TOKEN/data\" Note Replace your_device_token with your device token displayed on the device page .","title":"Example"},{"location":"api/http/#response-body_1","text":"{ \"message\": \"OK\" } or { \"error\": error_text }","title":"Response Body"},{"location":"api/http/#diagnostic-data","text":"Sends device's diagnostic data.","title":"Diagnostic Data"},{"location":"api/http/#request-destination_2","text":"Method : POST URL : https://cloud4rpi.io/api/devices/{token}/diagnostics","title":"Request Destination"},{"location":"api/http/#url-parameters_2","text":"Name Description token The device token","title":"URL Parameters"},{"location":"api/http/#headers_2","text":"Content-Type: application/json","title":"Headers"},{"location":"api/http/#request-body_2","text":"{ \"ts\": datetime_isoformat, \"payload\": { var_name: var_value, var_name: var_value, // ... var_name: var_value } }","title":"Request Body"},{"location":"api/http/#parameters_2","text":"Name Description Type Possible Values datetime_isoformat Timestamp (optional) string Time in the ISO 8601 format with the time zone designator specified explicitly var_name Variable name string Any var_value Variable value any Any","title":"Parameters"},{"location":"api/http/#example_2","text":"The following example sends the following diagnostic values to Cloud4RPi: CPU Temperature : 41 IP Address : 192.168.1.50 export DEVICE_TOKEN=your_device_token curl -X POST \\ -H \"Content-Type: application/json\" \\ -d '{\"ts\":\"$(date -Is)\",\"payload\":{\"CPU Temperature\":41,\"IP Address\":\"192.168.1.50\"}}' \\ \"https://cloud4rpi.io/api/devices/$DEVICE_TOKEN/diagnostics\" Note Replace your_device_token with your device token displayed on the device page .","title":"Example"},{"location":"api/http/#response-body_2","text":"{ \"message\": \"OK\" } or { \"error\": error_text }","title":"Response Body"},{"location":"api/http/#commands-queue","text":"Acquires the recent commands sent from the Control Panel.","title":"Commands Queue"},{"location":"api/http/#request-destination_3","text":"Method : GET URL : https://cloud4rpi.io/api/devices/{token}/commands/latest","title":"Request Destination"},{"location":"api/http/#url-parameters_3","text":"Name Description token The device token","title":"URL Parameters"},{"location":"api/http/#example_3","text":"export DEVICE_TOKEN=your_device_token curl -X GET \"https://cloud4rpi.io/api/devices/$DEVICE_TOKEN/commands/latest\"","title":"Example"},{"location":"api/http/#response-body_3","text":"[ {var_name: var_new_value}, {var_name: var_new_value}, // ... {var_name: var_new_value} ]","title":"Response Body"},{"location":"api/http/#parameters_3","text":"Name Description Type Possible Values var_name Variable name string Any var_new_value New variable value corresponding Any The commands are in chronological order.","title":"Parameters"},{"location":"api/mqtt/","text":"MQTT Protocol API Prerequisites The examples in this section are presented for the Eclipse Mosquitto\u2122 MQTT client. Install the client if you are going to run the examples. On Debian-based operating systems you can install it using the following command: sudo apt-get install mosquitto-clients Cloud4RPi MQTT Broker Use the following data to connect to the MQTT broker: Host: With SSL encryption: mqtts://mq.cloud4rpi.io Without SSL encryption: mqtt://mq.cloud4rpi.io Port: With SSL encryption: 8883 Without SSL encryption: 1883 Client ID : Your Device Token Warning Since the Client ID is used for authentication, you should not open more than one connection with a single Device Token at the same time. Note Login and Password are not used, you can leave them empty. Variables Configuration Update the device's configuration by sending messages to the following topic: devices/{token}/config Topic Parameters Name Description token The device token Message Structure { \"payload\": [ {\"name\": name, \"type\": type}, {\"name\": name, \"type\": type}, // ... {\"name\": name, \"type\": type} ] } Parameters Name Description Type Possible Values name Variable name string Any string type Variable type string \"bool\", \"numeric\", \"string\", or \"location\" Note Use the following object to send the location variable values: {\"lat\": latitude_value, \"lng\": longitude_value} , where latitude_value and longitude_value are floating point numbers. Example The following example creates two variables on the device: Temperature (numeric) LEDOn (boolean) export DEVICE_TOKEN=your_device_token mosquitto_pub -q 1 -d -t \"devices/$DEVICE_TOKEN/config\" -h mq.cloud4rpi.io -i \"$DEVICE_TOKEN\" \\ -m '{\"payload\":[{\"name\":\"Temperature\",\"type\":\"numeric\"},{\"name\":\"LEDOn\",\"type\":\"bool\"}]}' Note Replace your_device_token with your device token displayed on the device page . Variable Values Note Before sending variable values, configure variables by sending the Variables Configuration message . Send messages with your variable values to the following topic: devices/{token}/data Topic Parameters Name Description token The device token Message Structure { \"ts\": datetime_isoformat, \"payload\": { var_name: var_value, var_name: var_value, // ... var_name: var_value } } Parameters Name Description Type Possible Values datetime_isoformat Timestamp (optional) string Time in the ISO 8601 format with the time zone designator specified explicitly var_name Variable name string One of the variables var_value Variable value corresponding Any Example The following example sends the values of two variables: Temperature : 24 LEDOn : true export DEVICE_TOKEN=your_device_token mosquitto_pub -q 1 -d -t \"devices/$DEVICE_TOKEN/data\" -h mq.cloud4rpi.io -i \"$DEVICE_TOKEN\" \\ -m '{\"payload\":{\"Temperature\":24,\"LEDOn\":true}}' Note Replace your_device_token with your device token displayed on the device page . Diagnostic Data Send messages with your device's diagnostic data to the following topic: devices/{token}/diagnostics Topic Parameters Name Description token The device token Message Structure { \"ts\": datetime_isoformat, \"payload\": { var_name: var_value, var_name: var_value, // ... var_name: var_value } } Parameters Name Description Type Possible Values datetime_isoformat Timestamp (optional) string Time in the ISO 8601 format with the time zone designator specified explicitly var_name Variable name string Any var_value Variable value any Any Example The following example sends the following diagnostic values to Cloud4RPI: CPU Temperature : 41 IP Address : 192.168.1.50 export DEVICE_TOKEN=your_device_token mosquitto_pub -q 1 -d -t \"devices/$DEVICE_TOKEN/diagnostics\" -h mq.cloud4rpi.io -i \"$DEVICE_TOKEN\" \\ -m '{\"payload\":{\"CPU Temperature\":41,\"IP Address\":\"192.168.1.50\"}}' Note Replace your_device_token with your device token displayed on the device page . Commands Stream Receive commands sent from the Control Panels in real time by subscribing to the following topic: devices/{token}/commands Topic Parameters Name Description token The device token Example Execute the following command to subscribe: export DEVICE_TOKEN=your_device_token mosquitto_sub -d -t \"devices/$DEVICE_TOKEN/commands\" -h mq.cloud4rpi.io -i \"$DEVICE_TOKEN\" This program works in the foreground and blocks the input while the connection to the broker persists. So, you instantly get commands sent from the UI in the following format: Message Structure {var_name:var_new_value} Parameters Name Description Type Possible Values var_name Variable name string Any var_new_value New variable value corresponding Any","title":"MQTT Protocol"},{"location":"api/mqtt/#mqtt-protocol-api","text":"","title":"MQTT Protocol API"},{"location":"api/mqtt/#prerequisites","text":"The examples in this section are presented for the Eclipse Mosquitto\u2122 MQTT client. Install the client if you are going to run the examples. On Debian-based operating systems you can install it using the following command: sudo apt-get install mosquitto-clients","title":"Prerequisites"},{"location":"api/mqtt/#cloud4rpi-mqtt-broker","text":"Use the following data to connect to the MQTT broker: Host: With SSL encryption: mqtts://mq.cloud4rpi.io Without SSL encryption: mqtt://mq.cloud4rpi.io Port: With SSL encryption: 8883 Without SSL encryption: 1883 Client ID : Your Device Token Warning Since the Client ID is used for authentication, you should not open more than one connection with a single Device Token at the same time. Note Login and Password are not used, you can leave them empty.","title":"Cloud4RPi MQTT Broker"},{"location":"api/mqtt/#variables-configuration","text":"Update the device's configuration by sending messages to the following topic: devices/{token}/config","title":"Variables Configuration"},{"location":"api/mqtt/#topic-parameters","text":"Name Description token The device token","title":"Topic Parameters"},{"location":"api/mqtt/#message-structure","text":"{ \"payload\": [ {\"name\": name, \"type\": type}, {\"name\": name, \"type\": type}, // ... {\"name\": name, \"type\": type} ] }","title":"Message Structure"},{"location":"api/mqtt/#parameters","text":"Name Description Type Possible Values name Variable name string Any string type Variable type string \"bool\", \"numeric\", \"string\", or \"location\" Note Use the following object to send the location variable values: {\"lat\": latitude_value, \"lng\": longitude_value} , where latitude_value and longitude_value are floating point numbers.","title":"Parameters"},{"location":"api/mqtt/#example","text":"The following example creates two variables on the device: Temperature (numeric) LEDOn (boolean) export DEVICE_TOKEN=your_device_token mosquitto_pub -q 1 -d -t \"devices/$DEVICE_TOKEN/config\" -h mq.cloud4rpi.io -i \"$DEVICE_TOKEN\" \\ -m '{\"payload\":[{\"name\":\"Temperature\",\"type\":\"numeric\"},{\"name\":\"LEDOn\",\"type\":\"bool\"}]}' Note Replace your_device_token with your device token displayed on the device page .","title":"Example"},{"location":"api/mqtt/#variable-values","text":"Note Before sending variable values, configure variables by sending the Variables Configuration message . Send messages with your variable values to the following topic: devices/{token}/data","title":"Variable Values"},{"location":"api/mqtt/#topic-parameters_1","text":"Name Description token The device token","title":"Topic Parameters"},{"location":"api/mqtt/#message-structure_1","text":"{ \"ts\": datetime_isoformat, \"payload\": { var_name: var_value, var_name: var_value, // ... var_name: var_value } }","title":"Message Structure"},{"location":"api/mqtt/#parameters_1","text":"Name Description Type Possible Values datetime_isoformat Timestamp (optional) string Time in the ISO 8601 format with the time zone designator specified explicitly var_name Variable name string One of the variables var_value Variable value corresponding Any","title":"Parameters"},{"location":"api/mqtt/#example_1","text":"The following example sends the values of two variables: Temperature : 24 LEDOn : true export DEVICE_TOKEN=your_device_token mosquitto_pub -q 1 -d -t \"devices/$DEVICE_TOKEN/data\" -h mq.cloud4rpi.io -i \"$DEVICE_TOKEN\" \\ -m '{\"payload\":{\"Temperature\":24,\"LEDOn\":true}}' Note Replace your_device_token with your device token displayed on the device page .","title":"Example"},{"location":"api/mqtt/#diagnostic-data","text":"Send messages with your device's diagnostic data to the following topic: devices/{token}/diagnostics","title":"Diagnostic Data"},{"location":"api/mqtt/#topic-parameters_2","text":"Name Description token The device token","title":"Topic Parameters"},{"location":"api/mqtt/#message-structure_2","text":"{ \"ts\": datetime_isoformat, \"payload\": { var_name: var_value, var_name: var_value, // ... var_name: var_value } }","title":"Message Structure"},{"location":"api/mqtt/#parameters_2","text":"Name Description Type Possible Values datetime_isoformat Timestamp (optional) string Time in the ISO 8601 format with the time zone designator specified explicitly var_name Variable name string Any var_value Variable value any Any","title":"Parameters"},{"location":"api/mqtt/#example_2","text":"The following example sends the following diagnostic values to Cloud4RPI: CPU Temperature : 41 IP Address : 192.168.1.50 export DEVICE_TOKEN=your_device_token mosquitto_pub -q 1 -d -t \"devices/$DEVICE_TOKEN/diagnostics\" -h mq.cloud4rpi.io -i \"$DEVICE_TOKEN\" \\ -m '{\"payload\":{\"CPU Temperature\":41,\"IP Address\":\"192.168.1.50\"}}' Note Replace your_device_token with your device token displayed on the device page .","title":"Example"},{"location":"api/mqtt/#commands-stream","text":"Receive commands sent from the Control Panels in real time by subscribing to the following topic: devices/{token}/commands","title":"Commands Stream"},{"location":"api/mqtt/#topic-parameters_3","text":"Name Description token The device token","title":"Topic Parameters"},{"location":"api/mqtt/#example_3","text":"Execute the following command to subscribe: export DEVICE_TOKEN=your_device_token mosquitto_sub -d -t \"devices/$DEVICE_TOKEN/commands\" -h mq.cloud4rpi.io -i \"$DEVICE_TOKEN\" This program works in the foreground and blocks the input while the connection to the broker persists. So, you instantly get commands sent from the UI in the following format:","title":"Example"},{"location":"api/mqtt/#message-structure_3","text":"{var_name:var_new_value}","title":"Message Structure"},{"location":"api/mqtt/#parameters_3","text":"Name Description Type Possible Values var_name Variable name string Any var_new_value New variable value corresponding Any","title":"Parameters"},{"location":"api/python/","text":"Python Library API Library Root The Cloud4RPi Python library provides the following public methods (defined in the __init__.py file): connect connect(device_token, host=mqqtBrokerHost, port=None, tls_config=None) \u2013 connects to the Cloud and returns a Device object. Parameters: device_token \u2013 a token displayed at the top of the device page on cloud4rpi.io . You can use the New Device button in the top right corner of the Devices page to create a new device and use its token. host (optional) \u2013 a Cloud4RPi MQTT broker address. The default address is defined in the config.py file. port (optional) \u2013 a Cloud4RPi MQTT broker port. The default port is defined in the config.py file. tls_config (optional) \u2013 a dictionary with parameters for the Paho MQTT's tls_set() function. Example: import cloud4rpi device = cloud4rpi.connect('823SnkK3N8L5Y7QQGiuGd53fi', tls_config={'ca_certs': '/etc/ssl/certs/ca-certificates.crt'}) set_logging_to_file set_logging_to_file(log_file_path) \u2013 configures the library to save activity logs to a specified file. Parameters: log_file_path \u2013 path to a log file. set_logging_level set_logging_level(level=logging.INFO) \u2013 changes the logging verbosity level. Parameters: level (optional) \u2013 logging verbosity level . The default level is INFO . Device The Device class provides the following methods to communicate with the Cloud4RPi server and manage the variables' state: declare declare(variables) \u2013 configures the variables attached to the device. Parameters: variables \u2013 a dictionary with the variables description of the following structure: { name: { 'type': type, 'bind': binding, 'value': value }, ... } , where: name \u2013 an internal variable name. Name cannot contain dots ( . ) or dollar signs ( $ ). You can change the name displayed in the UI on the device page. type \u2013 a variable type. Available types: 'bool' , 'numeric' , 'string' and 'location' . binding \u2013 a function that accepts the current variable as a parameter and returns a new variable. This function is called every time a value is updated (scheduled updates and value change signals from Control Panels). You can also pass a Python variable if the value should not be changed from Cloud4RPi Control Panels. value (optional) \u2013 an initial variable value passed to a binding function during the first update. Note Use the following object to send the location variable values: {\"lat\": latitude_value, \"lng\": longitude_value} , where latitude_value and longitude_value are floating point numbers. Example: def led_control(value): GPIO.output(LED_PIN, value) return GPIO.input(LED_PIN) ds_sensors = DS18b20.find_all() device.declare({ 'Room Temp': { 'type': 'numeric', 'bind': ds_sensors[0] if ds_sensors else None }, 'LED On': { 'type': 'bool', 'value': False, 'bind': led_control } }) declare_diag declare_diag(diag) \u2013 configures the diagnostic variables attached to the device. Parameters: diag \u2013 a dictionary with the diagnostic variables' description. It has the following structure: { name: binding, ... } , where: name \u2013 a diagnostic variable's name. binding \u2013 a Python variable or function that holds or returns the actual Cloud4RPi diagnostic variable's value. Example: device.declare_diag({ 'Host': gethostname(), 'Operating System': \" \".join(uname()) }) read_config read_config() \u2013 prepares the previously declared (with the declare(variables) function) variables' configuration for publishing (with the publish_config(cfg=None) function). Returns: A dictionary in the format suitable for the publish_config(cfg=None) function. read_data read_data() \u2013 updates all variable values and prepares the variables' state for publishing (with the publish_data(data=None) function). This method calls all the binding functions and saves the returned values as new variable values. Returns: A dictionary in the format suitable for the publish_data(data=None) function. read_diag read_diag() \u2013 reads all the diagnostic variable values and prepares the data for publishing (with the publish_diag(diag=None) function). Returns: A dictionary in the format suitable for the publish_diag(diag=None) function. publish_config publish_config(cfg=None) \u2013 publishes the variables' configuration to the Cloud4RPi server. Parameters: cfg (optional) \u2013 the read_config() output. If not passed, read_config() is invoked internally. This is a list with the following structure: [{'name': name, 'type': type}, ...] , where name and type corresponds to the same values in the variables parameter passed to the declare(variables) function. publish_data publish_data(data=None) \u2013 publishes variable values to the Cloud4RPi server. Parameters: data (optional) \u2013 the read_data() output. If not passed, read_data() is invoked internally. This is a dictionary with the following structure: {name: value, ...} , where name corresponds to the variable name in the variables parameter passed to the declare(variables) function, and value is the variable value returned by binding . publish_diag publish_diag(diag=None) \u2013 publishes diagnostic variable values to the Cloud4RPi server. Parameters: diag (optional) \u2013 the read_diag() output. If not passed, read_diag() is invoked internally. This is a dictionary with the following structure: {name: value, ...} , where name corresponds to the variable's name in the diag parameter passed to the declare_diag(diag) function, and value is the variable's value the binding returns.","title":"Python Library"},{"location":"api/python/#python-library-api","text":"","title":"Python Library API"},{"location":"api/python/#library-root","text":"The Cloud4RPi Python library provides the following public methods (defined in the __init__.py file):","title":"Library Root"},{"location":"api/python/#connect","text":"connect(device_token, host=mqqtBrokerHost, port=None, tls_config=None) \u2013 connects to the Cloud and returns a Device object. Parameters: device_token \u2013 a token displayed at the top of the device page on cloud4rpi.io . You can use the New Device button in the top right corner of the Devices page to create a new device and use its token. host (optional) \u2013 a Cloud4RPi MQTT broker address. The default address is defined in the config.py file. port (optional) \u2013 a Cloud4RPi MQTT broker port. The default port is defined in the config.py file. tls_config (optional) \u2013 a dictionary with parameters for the Paho MQTT's tls_set() function. Example: import cloud4rpi device = cloud4rpi.connect('823SnkK3N8L5Y7QQGiuGd53fi', tls_config={'ca_certs': '/etc/ssl/certs/ca-certificates.crt'})","title":"connect"},{"location":"api/python/#set_logging_to_file","text":"set_logging_to_file(log_file_path) \u2013 configures the library to save activity logs to a specified file. Parameters: log_file_path \u2013 path to a log file.","title":"set_logging_to_file"},{"location":"api/python/#set_logging_level","text":"set_logging_level(level=logging.INFO) \u2013 changes the logging verbosity level. Parameters: level (optional) \u2013 logging verbosity level . The default level is INFO .","title":"set_logging_level"},{"location":"api/python/#device","text":"The Device class provides the following methods to communicate with the Cloud4RPi server and manage the variables' state:","title":"Device"},{"location":"api/python/#declare","text":"declare(variables) \u2013 configures the variables attached to the device. Parameters: variables \u2013 a dictionary with the variables description of the following structure: { name: { 'type': type, 'bind': binding, 'value': value }, ... } , where: name \u2013 an internal variable name. Name cannot contain dots ( . ) or dollar signs ( $ ). You can change the name displayed in the UI on the device page. type \u2013 a variable type. Available types: 'bool' , 'numeric' , 'string' and 'location' . binding \u2013 a function that accepts the current variable as a parameter and returns a new variable. This function is called every time a value is updated (scheduled updates and value change signals from Control Panels). You can also pass a Python variable if the value should not be changed from Cloud4RPi Control Panels. value (optional) \u2013 an initial variable value passed to a binding function during the first update. Note Use the following object to send the location variable values: {\"lat\": latitude_value, \"lng\": longitude_value} , where latitude_value and longitude_value are floating point numbers. Example: def led_control(value): GPIO.output(LED_PIN, value) return GPIO.input(LED_PIN) ds_sensors = DS18b20.find_all() device.declare({ 'Room Temp': { 'type': 'numeric', 'bind': ds_sensors[0] if ds_sensors else None }, 'LED On': { 'type': 'bool', 'value': False, 'bind': led_control } })","title":"declare"},{"location":"api/python/#declare_diag","text":"declare_diag(diag) \u2013 configures the diagnostic variables attached to the device. Parameters: diag \u2013 a dictionary with the diagnostic variables' description. It has the following structure: { name: binding, ... } , where: name \u2013 a diagnostic variable's name. binding \u2013 a Python variable or function that holds or returns the actual Cloud4RPi diagnostic variable's value. Example: device.declare_diag({ 'Host': gethostname(), 'Operating System': \" \".join(uname()) })","title":"declare_diag"},{"location":"api/python/#read_config","text":"read_config() \u2013 prepares the previously declared (with the declare(variables) function) variables' configuration for publishing (with the publish_config(cfg=None) function). Returns: A dictionary in the format suitable for the publish_config(cfg=None) function.","title":"read_config"},{"location":"api/python/#read_data","text":"read_data() \u2013 updates all variable values and prepares the variables' state for publishing (with the publish_data(data=None) function). This method calls all the binding functions and saves the returned values as new variable values. Returns: A dictionary in the format suitable for the publish_data(data=None) function.","title":"read_data"},{"location":"api/python/#read_diag","text":"read_diag() \u2013 reads all the diagnostic variable values and prepares the data for publishing (with the publish_diag(diag=None) function). Returns: A dictionary in the format suitable for the publish_diag(diag=None) function.","title":"read_diag"},{"location":"api/python/#publish_config","text":"publish_config(cfg=None) \u2013 publishes the variables' configuration to the Cloud4RPi server. Parameters: cfg (optional) \u2013 the read_config() output. If not passed, read_config() is invoked internally. This is a list with the following structure: [{'name': name, 'type': type}, ...] , where name and type corresponds to the same values in the variables parameter passed to the declare(variables) function.","title":"publish_config"},{"location":"api/python/#publish_data","text":"publish_data(data=None) \u2013 publishes variable values to the Cloud4RPi server. Parameters: data (optional) \u2013 the read_data() output. If not passed, read_data() is invoked internally. This is a dictionary with the following structure: {name: value, ...} , where name corresponds to the variable name in the variables parameter passed to the declare(variables) function, and value is the variable value returned by binding .","title":"publish_data"},{"location":"api/python/#publish_diag","text":"publish_diag(diag=None) \u2013 publishes diagnostic variable values to the Cloud4RPi server. Parameters: diag (optional) \u2013 the read_diag() output. If not passed, read_diag() is invoked internally. This is a dictionary with the following structure: {name: value, ...} , where name corresponds to the variable's name in the diag parameter passed to the declare_diag(diag) function, and value is the variable's value the binding returns.","title":"publish_diag"},{"location":"howto/chip/","text":"Control LED from WEB using C.H.I.P. Prerequisites Configured and connected device. Breadboard, connecting wires, 330\u03a9..1k\u03a9 resistor. Code Open the control.py sample file. Replace __YOUR_DEVICE_TOKEN__ with the device token from the Device page. Connect an LED to a GPIO pin and set the correct value to the LED_PIN variable. The default pin is XIO-P0 . Run sudo python control.py . A new LED On variable should appear on the Device page. Open the Control Panels page and add a new control panel. Add a new Switch widget and choose the newly added LED On variable. You can now switch the LED state using this widget. Monitor Device Events using Colored Status Prerequisites Configured and connected device. Code Open the control.py sample file. Replace __YOUR_DEVICE_TOKEN__ with the device token from the Device page. Run sudo python control.py . A new STATUS variable should appear on the Device page. Open the Control Panels page and add a new control panel or open an existing one. Add a new Text widget and choose the newly added STATUS variable. Change the pre-defined status color items according to the event names from the code above. As a result, you should have the following items: { IDLE: #00ff00} { RING: #ff6600} { BOOM!: #ff0000} Now this widget displays an incoming status with color. Connect DS18B20 Temperature Sensor This example shows how to use the DS18B20 temperature sensor with the Cloud4RPi service. Prerequisites Configured and connected device. Breadboard, connecting wires, a pull-up resistor (4.7k\u03a9). Schematics Connect the GND pin to any GND pin on your board. Connect the Vdd pin to a 5V or 3.3V pin. Connect the DQ pin to the pull-up resistor and the resistor to Vdd . Connect the DQ pin to the LCD-D2 pin. You can connect several 1-Wire devices to the bus without additional resistors. Code Open the control.py . Replace __YOUR_DEVICE_TOKEN__ with the device token from the Device page. Run sudo python control.py . New Room Temp and CPU Temp variables should appear on the Device page. Open the Control Panels page and add a new control panel. Add a new Chart widget and choose the newly added Room Temp variable. Add a new Gauge widget and choose the newly added CPU Temp variable. You can now monitor CPU and room temperature using these widgets. Note If you need to start your script automatically when the system loads, install the control.py script as a service using our service_install.sh script. Refer to the Installing as a Service section for more details. Secure your MQTT connection Cloud4RPi supports the TLS-enabled MQTTs protocol. If your task requires an encrypted data transfer, enable TLS by changing the cloud4rpi.connect() method call as follows: device = cloud4rpi.connect(DEVICE_TOKEN, tls_config={'ca_certs': '/etc/ssl/certs/ca-certificates.crt'}) The tls_config dictionary holds parameters for the Paho MQTT's tls_set() function.","title":"C.H.I.P."},{"location":"howto/chip/#control-led-from-web-using-chip","text":"","title":"Control LED from WEB using C.H.I.P."},{"location":"howto/chip/#prerequisites","text":"Configured and connected device. Breadboard, connecting wires, 330\u03a9..1k\u03a9 resistor.","title":"Prerequisites"},{"location":"howto/chip/#code","text":"Open the control.py sample file. Replace __YOUR_DEVICE_TOKEN__ with the device token from the Device page. Connect an LED to a GPIO pin and set the correct value to the LED_PIN variable. The default pin is XIO-P0 . Run sudo python control.py . A new LED On variable should appear on the Device page. Open the Control Panels page and add a new control panel. Add a new Switch widget and choose the newly added LED On variable. You can now switch the LED state using this widget.","title":"Code"},{"location":"howto/chip/#monitor-device-events-using-colored-status","text":"","title":"Monitor Device Events using Colored Status"},{"location":"howto/chip/#prerequisites_1","text":"Configured and connected device.","title":"Prerequisites"},{"location":"howto/chip/#code_1","text":"Open the control.py sample file. Replace __YOUR_DEVICE_TOKEN__ with the device token from the Device page. Run sudo python control.py . A new STATUS variable should appear on the Device page. Open the Control Panels page and add a new control panel or open an existing one. Add a new Text widget and choose the newly added STATUS variable. Change the pre-defined status color items according to the event names from the code above. As a result, you should have the following items: { IDLE: #00ff00} { RING: #ff6600} { BOOM!: #ff0000} Now this widget displays an incoming status with color.","title":"Code"},{"location":"howto/chip/#connect-ds18b20-temperature-sensor","text":"This example shows how to use the DS18B20 temperature sensor with the Cloud4RPi service.","title":"Connect DS18B20 Temperature Sensor"},{"location":"howto/chip/#prerequisites_2","text":"Configured and connected device. Breadboard, connecting wires, a pull-up resistor (4.7k\u03a9).","title":"Prerequisites"},{"location":"howto/chip/#schematics","text":"Connect the GND pin to any GND pin on your board. Connect the Vdd pin to a 5V or 3.3V pin. Connect the DQ pin to the pull-up resistor and the resistor to Vdd . Connect the DQ pin to the LCD-D2 pin. You can connect several 1-Wire devices to the bus without additional resistors.","title":"Schematics"},{"location":"howto/chip/#code_2","text":"Open the control.py . Replace __YOUR_DEVICE_TOKEN__ with the device token from the Device page. Run sudo python control.py . New Room Temp and CPU Temp variables should appear on the Device page. Open the Control Panels page and add a new control panel. Add a new Chart widget and choose the newly added Room Temp variable. Add a new Gauge widget and choose the newly added CPU Temp variable. You can now monitor CPU and room temperature using these widgets. Note If you need to start your script automatically when the system loads, install the control.py script as a service using our service_install.sh script. Refer to the Installing as a Service section for more details.","title":"Code"},{"location":"howto/chip/#secure-your-mqtt-connection","text":"Cloud4RPi supports the TLS-enabled MQTTs protocol. If your task requires an encrypted data transfer, enable TLS by changing the cloud4rpi.connect() method call as follows: device = cloud4rpi.connect(DEVICE_TOKEN, tls_config={'ca_certs': '/etc/ssl/certs/ca-certificates.crt'}) The tls_config dictionary holds parameters for the Paho MQTT's tls_set() function.","title":"Secure your MQTT connection"},{"location":"howto/o2/","text":"Control Omega LEDs from WEB Prerequisites Configured and connected Omega2 board. Expansion Dock (optional) Code Open the control.py sample file. Replace __YOUR_DEVICE_TOKEN__ with the device token from the from the Device page. Run python control.py . Four new variables should appear on the Device page: Omega LED , RGB LED - Red , RGB LED - Green and RGB LED - Blue . Open the Control Panels page and add a new control panel. Add a Switch widget and bind them to the Omega LED variable. Add Slider widgets and bind them to RGB LED variables with range from 0 to 255. You can now change the onboard LED state (and RGB LED color if you use the Expansion Dock) with these widgets. Secure your MQTT connection Cloud4RPi supports the TLS-enabled MQTTs protocol. If your task requires an encrypted data transfer, follow the steps below: Install a package that provides the CA certificates for SSL and TLS protocols: sh opkg update && opkg install ca-certificates Enable TLS by changing the cloud4rpi.connect() method call as follows: python device = cloud4rpi.connect(DEVICE_TOKEN, tls_config={'ca_certs': '/etc/ssl/certs/ca-certificates.crt'}) The tls_config dictionary holds parameters for the Paho MQTT's tls_set() function.","title":"Omega2"},{"location":"howto/o2/#control-omega-leds-from-web","text":"","title":"Control Omega LEDs from WEB"},{"location":"howto/o2/#prerequisites","text":"Configured and connected Omega2 board. Expansion Dock (optional)","title":"Prerequisites"},{"location":"howto/o2/#code","text":"Open the control.py sample file. Replace __YOUR_DEVICE_TOKEN__ with the device token from the from the Device page. Run python control.py . Four new variables should appear on the Device page: Omega LED , RGB LED - Red , RGB LED - Green and RGB LED - Blue . Open the Control Panels page and add a new control panel. Add a Switch widget and bind them to the Omega LED variable. Add Slider widgets and bind them to RGB LED variables with range from 0 to 255. You can now change the onboard LED state (and RGB LED color if you use the Expansion Dock) with these widgets.","title":"Code"},{"location":"howto/o2/#secure-your-mqtt-connection","text":"Cloud4RPi supports the TLS-enabled MQTTs protocol. If your task requires an encrypted data transfer, follow the steps below: Install a package that provides the CA certificates for SSL and TLS protocols: sh opkg update && opkg install ca-certificates Enable TLS by changing the cloud4rpi.connect() method call as follows: python device = cloud4rpi.connect(DEVICE_TOKEN, tls_config={'ca_certs': '/etc/ssl/certs/ca-certificates.crt'}) The tls_config dictionary holds parameters for the Paho MQTT's tls_set() function.","title":"Secure your MQTT connection"},{"location":"howto/rpi/","text":"Control LED from WEB using Raspberry Pi Prerequisites Configured and connected device. Breadboard, connecting wires, 330\u03a9..1k\u03a9 resistor. Code Open the control.py sample file. Replace __YOUR_DEVICE_TOKEN__ with the device token from the Device page. Connect an LED to a GPIO pin and set the correct value to the LED_PIN variable. The default pin is GPIO18 (Pin 12). Run sudo python control.py . A new LED On variable should appear on the Device page. Open the Control Panels page and add a new control panel. Add a new Switch widget and choose the newly added LED On variable. You can now switch the LED state using this widget. Monitor Device Events using Colored Status Prerequisites Configured and connected device. Code Open the control.py sample file. Replace __YOUR_DEVICE_TOKEN__ with the device token from the Device page. Run sudo python control.py . A new STATUS variable should appear on the Device page. Open the Control Panels page and add a new control panel or open an existing one. Add a new Text widget and choose the newly added STATUS variable. Change the pre-defined status color items according to the event names from the code above. As a result, you should have the following items: { IDLE: #00ff00} { RING: #ff6600} { BOOM!: #ff0000} Now this widget displays an incoming status with color. Connect DS18B20 Temperature Sensor This example shows how to use the DS18B20 temperature sensor with the Cloud4RPi service. Prerequisites Configured and connected device with 1-Wire support. Enabled 1-Wire interface. Breadboard, connecting wires, a pull-up resistor (4.7k\u03a9). Schematics Connect the GND pin to any GND pin on your board. Connect the Vdd pin to a 5V or 3.3V pin. Connect the DQ pin to the pull-up resistor and the resistor to Vdd . Connect the DQ pin to the 1-Wire pin. The default pin is GPIO4 (Pin 7). You can connect several 1-Wire devices to the bus without additional resistors. Code Open the control.py sample file. Replace __YOUR_DEVICE_TOKEN__ with your personal device token from the Device page. Run sudo python control.py . New Room Temp and CPU Temp variables should appear on the Device page. Open the Control Panels page and add a new control panel. Add a new Chart widget and choose the newly added Room Temp variable. Add a new Gauge widget and choose the newly added CPU Temp variable. You can now monitor CPU and room temperature using these widgets. Note If you need to start your script automatically when the system loads, install the control.py script as a service using our service_install.sh script. Refer to the Installing as a Service section for more details. Secure your MQTT connection Cloud4RPi supports the TLS-enabled MQTTs protocol. If your task requires an encrypted data transfer, enable TLS by changing the cloud4rpi.connect() method call as follows: device = cloud4rpi.connect(DEVICE_TOKEN, tls_config={'ca_certs': '/etc/ssl/certs/ca-certificates.crt'}) The tls_config dictionary holds parameters for the Paho MQTT's tls_set() function.","title":"Raspberry Pi"},{"location":"howto/rpi/#control-led-from-web-using-raspberry-pi","text":"","title":"Control LED from WEB using Raspberry Pi"},{"location":"howto/rpi/#prerequisites","text":"Configured and connected device. Breadboard, connecting wires, 330\u03a9..1k\u03a9 resistor.","title":"Prerequisites"},{"location":"howto/rpi/#code","text":"Open the control.py sample file. Replace __YOUR_DEVICE_TOKEN__ with the device token from the Device page. Connect an LED to a GPIO pin and set the correct value to the LED_PIN variable. The default pin is GPIO18 (Pin 12). Run sudo python control.py . A new LED On variable should appear on the Device page. Open the Control Panels page and add a new control panel. Add a new Switch widget and choose the newly added LED On variable. You can now switch the LED state using this widget.","title":"Code"},{"location":"howto/rpi/#monitor-device-events-using-colored-status","text":"","title":"Monitor Device Events using Colored Status"},{"location":"howto/rpi/#prerequisites_1","text":"Configured and connected device.","title":"Prerequisites"},{"location":"howto/rpi/#code_1","text":"Open the control.py sample file. Replace __YOUR_DEVICE_TOKEN__ with the device token from the Device page. Run sudo python control.py . A new STATUS variable should appear on the Device page. Open the Control Panels page and add a new control panel or open an existing one. Add a new Text widget and choose the newly added STATUS variable. Change the pre-defined status color items according to the event names from the code above. As a result, you should have the following items: { IDLE: #00ff00} { RING: #ff6600} { BOOM!: #ff0000} Now this widget displays an incoming status with color.","title":"Code"},{"location":"howto/rpi/#connect-ds18b20-temperature-sensor","text":"This example shows how to use the DS18B20 temperature sensor with the Cloud4RPi service.","title":"Connect DS18B20 Temperature Sensor"},{"location":"howto/rpi/#prerequisites_2","text":"Configured and connected device with 1-Wire support. Enabled 1-Wire interface. Breadboard, connecting wires, a pull-up resistor (4.7k\u03a9).","title":"Prerequisites"},{"location":"howto/rpi/#schematics","text":"Connect the GND pin to any GND pin on your board. Connect the Vdd pin to a 5V or 3.3V pin. Connect the DQ pin to the pull-up resistor and the resistor to Vdd . Connect the DQ pin to the 1-Wire pin. The default pin is GPIO4 (Pin 7). You can connect several 1-Wire devices to the bus without additional resistors.","title":"Schematics"},{"location":"howto/rpi/#code_2","text":"Open the control.py sample file. Replace __YOUR_DEVICE_TOKEN__ with your personal device token from the Device page. Run sudo python control.py . New Room Temp and CPU Temp variables should appear on the Device page. Open the Control Panels page and add a new control panel. Add a new Chart widget and choose the newly added Room Temp variable. Add a new Gauge widget and choose the newly added CPU Temp variable. You can now monitor CPU and room temperature using these widgets. Note If you need to start your script automatically when the system loads, install the control.py script as a service using our service_install.sh script. Refer to the Installing as a Service section for more details.","title":"Code"},{"location":"howto/rpi/#secure-your-mqtt-connection","text":"Cloud4RPi supports the TLS-enabled MQTTs protocol. If your task requires an encrypted data transfer, enable TLS by changing the cloud4rpi.connect() method call as follows: device = cloud4rpi.connect(DEVICE_TOKEN, tls_config={'ca_certs': '/etc/ssl/certs/ca-certificates.crt'}) The tls_config dictionary holds parameters for the Paho MQTT's tls_set() function.","title":"Secure your MQTT connection"},{"location":"start/chip/","text":"Connecting a C.H.I.P. Board Follow the instructions below to connect your device to the Cloud4RPi control panel. Prerequisites It is advisable to update your system before installing. sudo apt update && sudo apt upgrade -y Install/update the required packages. sudo apt install git python3 python3-pip -y You can use alternative methods to install pip . Note The Cloud4RPi library is compatible with Python 3.2+ and Python 2.7.9+ versions. Getting the Cloud4RPi Client Library Install the library using your preferred Python version. The following command installs and integrates Cloud4RPi with your OS's default Python interpreter (usually Python 3): sudo pip3 install cloud4rpi If you are using Python 2, use the following command: sudo python2 -m pip install cloud4rpi Note For information on how to work with several versions of Python installed, see Python Documentation . If you get an error while using pip , try to update the setuptools and pip packages. sudo pip3 install --upgrade setuptools pip Hacking Together some Code We have prepared sample code for several platforms in the cloud4rpi-chip-python repository to demonstrate sending data to the Cloud. Get Cloud4RPi examples for your device: git clone https://github.com/cloud4rpi/cloud4rpi-chip-python.git && cd cloud4rpi-chip-python Before running a sample ( control.py ), remember to replace the __YOUR_DEVICE_TOKEN__ string with your real device token. Use a text editor (for instance, nano ) to replace __YOUR_DEVICE_TOKEN__ with the token displayed at the top of the device page on cloud4rpi.io . If you have no token yet, open the Devices page, create a device using the New Device button in the top right corner, and use its token. Note Install the CHIP_IO Python library as described in its documentation to use the C.H.I.P.'s GPIO subsystem from Python. If you do not need GPIO, remove the import CHIP_IO.GPIO as GPIO line and all GPIO references from the control.py example. Running Execute the script with a Python interpreter, for example: sudo python3 control.py Note If you have installed Cloud4RPi to a non-default Python, use the version with the Cloud4RPi library. If the script output looks right, open the Devices page to see if the device status has changed. Installing as a Service You can use our service templates to facilitate service installation. Pass the path to your Cloud4RPi-enabled Python script to the service_install.sh script as a parameter. chmod +x service_install.sh sudo ./service_install.sh your_script.py Note You need to replace 'your_script.py' with the actual path to your service script.","title":"C.H.I.P."},{"location":"start/chip/#connecting-a-chip-board","text":"Follow the instructions below to connect your device to the Cloud4RPi control panel.","title":"Connecting a C.H.I.P. Board"},{"location":"start/chip/#prerequisites","text":"It is advisable to update your system before installing. sudo apt update && sudo apt upgrade -y Install/update the required packages. sudo apt install git python3 python3-pip -y You can use alternative methods to install pip . Note The Cloud4RPi library is compatible with Python 3.2+ and Python 2.7.9+ versions.","title":"Prerequisites"},{"location":"start/chip/#getting-the-cloud4rpi-client-library","text":"Install the library using your preferred Python version. The following command installs and integrates Cloud4RPi with your OS's default Python interpreter (usually Python 3): sudo pip3 install cloud4rpi If you are using Python 2, use the following command: sudo python2 -m pip install cloud4rpi Note For information on how to work with several versions of Python installed, see Python Documentation . If you get an error while using pip , try to update the setuptools and pip packages. sudo pip3 install --upgrade setuptools pip","title":"Getting the Cloud4RPi Client Library"},{"location":"start/chip/#hacking-together-some-code","text":"We have prepared sample code for several platforms in the cloud4rpi-chip-python repository to demonstrate sending data to the Cloud. Get Cloud4RPi examples for your device: git clone https://github.com/cloud4rpi/cloud4rpi-chip-python.git && cd cloud4rpi-chip-python Before running a sample ( control.py ), remember to replace the __YOUR_DEVICE_TOKEN__ string with your real device token. Use a text editor (for instance, nano ) to replace __YOUR_DEVICE_TOKEN__ with the token displayed at the top of the device page on cloud4rpi.io . If you have no token yet, open the Devices page, create a device using the New Device button in the top right corner, and use its token. Note Install the CHIP_IO Python library as described in its documentation to use the C.H.I.P.'s GPIO subsystem from Python. If you do not need GPIO, remove the import CHIP_IO.GPIO as GPIO line and all GPIO references from the control.py example.","title":"Hacking Together some Code"},{"location":"start/chip/#running","text":"Execute the script with a Python interpreter, for example: sudo python3 control.py Note If you have installed Cloud4RPi to a non-default Python, use the version with the Cloud4RPi library. If the script output looks right, open the Devices page to see if the device status has changed.","title":"Running"},{"location":"start/chip/#installing-as-a-service","text":"You can use our service templates to facilitate service installation. Pass the path to your Cloud4RPi-enabled Python script to the service_install.sh script as a parameter. chmod +x service_install.sh sudo ./service_install.sh your_script.py Note You need to replace 'your_script.py' with the actual path to your service script.","title":"Installing as a Service"},{"location":"start/esp-ino/","text":"Connecting an ESP8266 or ESP32 Follow the instructions below to connect your ESP8266 board (like NodeMCU Dev Kit ) or ESP32 board (like ESP32-DevKitC ) to the Cloud4RPi control panel. Getting Libraries and Examples Open Arduino and select your board in the Tools | Board menu. Add ESP8266 or ESP32 support if it is not added yet. Install the Cloud4RPi library from the Library Manager . To do this, open the Sketch | Include Library | Manage Libraries menu, enter cloud4rpi into the search field and install the cloud4rpi-esp-arduino package. Install the dependencies: ArduinoJson and PubSubClient libraries. Configure the installed libraries: Open the %HOMEPATH%\\Documents\\Arduino\\libraries\\PubSubClient\\src\\PubSubClient.h ( ~/Documents/Arduino/libraries/PubSubClient/src/PubSubClient.h on Mac) file with any text editor (for instance, VS Code ). Add the following define directives at the beginning: #define MQTT_MAX_PACKET_SIZE 1024 #define MQTT_MAX_TRANSFER_SIZE 128 [Optional] Open the %HOMEPATH%\\Documents\\Arduino\\libraries\\cloud4rpi-esp-arduino\\src\\Cloud4RPi.h ( ~/Documents/Arduino/libraries/cloud4rpi-esp-arduino/src/Cloud4RPi.h on Mac) file and add the #define CLOUD4RPI_DEBUG 1 line at the beginning to enable verbose output. Opening Sample Code Use the File | Examples | cloud4rpi-esp-arduino menu item to open the sample code. Restart Arduino IDE if this item does not appear. Select the ESP32 Dev Module board in Tools menu. If the LED_BUILTIN constant is not defined in your board's library, change this constant to the LED's pin number (for example, 2 ). Replace the __SSID__ and __PASSWORD__ strings with your Wi-Fi network data. Connecting to Your Cloud4RPi Account Log in to your Cloud4RPi account or create a new one . Copy your device 's Device Token . You can create a device on the Devices page and copy its Device Token if you do not have one. Replace the __YOUR_DEVICE_TOKEN__ string with your device token. Running Hit the Build button and wait until the compilation is completed. Hit the Upload button. If the upload fails, try to start the board in the flashing mode (connect the power supply with the GPIO0 pin connected to GND) and try uploading again. Once flashing is complete, open Serial Monitor to monitor the device's status. Notice that the device on the Devices page went online and started sending data. Go to the Control Panels page and add a new control panel. Add a new Switch widget and bind it to the LED On variable. Add a new Text widget and bind it to the State variable. Configure different colors for the \"IDLE\" , \"RING\" and \"BOOM!\" strings. Add a new Slider widget and bind it to the DesiredTemp variable, set its minimum value to 10 and maximum value to 30. Add a new Gauge widget and bind it to the DesiredTemp variable, set its minimum value to 10 and maximum value to 30. Video","title":"Arduino"},{"location":"start/esp-ino/#connecting-an-esp8266-or-esp32","text":"Follow the instructions below to connect your ESP8266 board (like NodeMCU Dev Kit ) or ESP32 board (like ESP32-DevKitC ) to the Cloud4RPi control panel.","title":"Connecting an ESP8266 or ESP32"},{"location":"start/esp-ino/#getting-libraries-and-examples","text":"Open Arduino and select your board in the Tools | Board menu. Add ESP8266 or ESP32 support if it is not added yet. Install the Cloud4RPi library from the Library Manager . To do this, open the Sketch | Include Library | Manage Libraries menu, enter cloud4rpi into the search field and install the cloud4rpi-esp-arduino package. Install the dependencies: ArduinoJson and PubSubClient libraries. Configure the installed libraries: Open the %HOMEPATH%\\Documents\\Arduino\\libraries\\PubSubClient\\src\\PubSubClient.h ( ~/Documents/Arduino/libraries/PubSubClient/src/PubSubClient.h on Mac) file with any text editor (for instance, VS Code ). Add the following define directives at the beginning: #define MQTT_MAX_PACKET_SIZE 1024 #define MQTT_MAX_TRANSFER_SIZE 128 [Optional] Open the %HOMEPATH%\\Documents\\Arduino\\libraries\\cloud4rpi-esp-arduino\\src\\Cloud4RPi.h ( ~/Documents/Arduino/libraries/cloud4rpi-esp-arduino/src/Cloud4RPi.h on Mac) file and add the #define CLOUD4RPI_DEBUG 1 line at the beginning to enable verbose output.","title":"Getting Libraries and Examples"},{"location":"start/esp-ino/#opening-sample-code","text":"Use the File | Examples | cloud4rpi-esp-arduino menu item to open the sample code. Restart Arduino IDE if this item does not appear. Select the ESP32 Dev Module board in Tools menu. If the LED_BUILTIN constant is not defined in your board's library, change this constant to the LED's pin number (for example, 2 ). Replace the __SSID__ and __PASSWORD__ strings with your Wi-Fi network data.","title":"Opening Sample Code"},{"location":"start/esp-ino/#connecting-to-your-cloud4rpi-account","text":"Log in to your Cloud4RPi account or create a new one . Copy your device 's Device Token . You can create a device on the Devices page and copy its Device Token if you do not have one. Replace the __YOUR_DEVICE_TOKEN__ string with your device token.","title":"Connecting to Your Cloud4RPi Account"},{"location":"start/esp-ino/#running","text":"Hit the Build button and wait until the compilation is completed. Hit the Upload button. If the upload fails, try to start the board in the flashing mode (connect the power supply with the GPIO0 pin connected to GND) and try uploading again. Once flashing is complete, open Serial Monitor to monitor the device's status. Notice that the device on the Devices page went online and started sending data. Go to the Control Panels page and add a new control panel. Add a new Switch widget and bind it to the LED On variable. Add a new Text widget and bind it to the State variable. Configure different colors for the \"IDLE\" , \"RING\" and \"BOOM!\" strings. Add a new Slider widget and bind it to the DesiredTemp variable, set its minimum value to 10 and maximum value to 30. Add a new Gauge widget and bind it to the DesiredTemp variable, set its minimum value to 10 and maximum value to 30.","title":"Running"},{"location":"start/esp-ino/#video","text":"","title":"Video"},{"location":"start/esp-pio/","text":"Connecting an ESP8266 or ESP32 Follow the instructions below to connect your ESP8266 board (like NodeMCU Dev Kit ) or ESP32 board (like ESP32-DevKitC ) to the Cloud4RPi control panel. Creating a Project The Cloud4RPi library is published in the PlatformIO Registry . Follow the instructions below to start a new Cloud4RPi-enabled project: Create a new PlatformIO project for your board as described in the PlatformIO documentation ( Visual Studio Code , Atom ) Open your platformio.ini and add the following lines to the end: lib_deps = cloud4rpi-esp-arduino build_flags= ; Required for PubSub library -D MQTT_MAX_PACKET_SIZE=1024 -D MQTT_MAX_TRANSFER_SIZE=128 ; Enables the verbose output to Serial -D CLOUD4RPI_DEBUG=1 Save the platformio.ini file and open the src\\main.cpp file. Copy-paste the sample code . If the LED_BUILTIN constant is not defined in your board's library, change this constant to the LED's pin number (for example, 2 ). Replace the __SSID__ and __PASSWORD__ strings with your Wi-Fi network data. Connecting to Your Cloud4RPi Account Log in to your Cloud4RPi account or create a new one . Copy your device 's Device Token . You can create a device on the Devices page and copy its Device Token if you do not have one. Replace the __YOUR_DEVICE_TOKEN__ string with your device token. Running Hit the Build button and wait until the compilation is completed. Hit the Upload button. If the upload fails, try to start the board in the flashing mode (connect the power supply with the GPIO0 pin connected to GND) and try uploading again. Once flashing is complete, open Serial Monitor to monitor the device's status. Notice that the device on the Devices page went online and started sending data. Go to the Control Panels page and add a new control panel. Add a new Switch widget and bind it to the LED On variable. Add a new Text widget and bind it to the State variable. Configure different colors for the \"IDLE\" , \"RING\" and \"BOOM!\" strings. Add a new Slider widget and bind it to the DesiredTemp variable, set its minimum value to 10 and maximum value to 30. Add a new Gauge widget and bind it to the DesiredTemp variable, set its minimum value to 10 and maximum value to 30. Video","title":"PlatformIO"},{"location":"start/esp-pio/#connecting-an-esp8266-or-esp32","text":"Follow the instructions below to connect your ESP8266 board (like NodeMCU Dev Kit ) or ESP32 board (like ESP32-DevKitC ) to the Cloud4RPi control panel.","title":"Connecting an ESP8266 or ESP32"},{"location":"start/esp-pio/#creating-a-project","text":"The Cloud4RPi library is published in the PlatformIO Registry . Follow the instructions below to start a new Cloud4RPi-enabled project: Create a new PlatformIO project for your board as described in the PlatformIO documentation ( Visual Studio Code , Atom ) Open your platformio.ini and add the following lines to the end: lib_deps = cloud4rpi-esp-arduino build_flags= ; Required for PubSub library -D MQTT_MAX_PACKET_SIZE=1024 -D MQTT_MAX_TRANSFER_SIZE=128 ; Enables the verbose output to Serial -D CLOUD4RPI_DEBUG=1 Save the platformio.ini file and open the src\\main.cpp file. Copy-paste the sample code . If the LED_BUILTIN constant is not defined in your board's library, change this constant to the LED's pin number (for example, 2 ). Replace the __SSID__ and __PASSWORD__ strings with your Wi-Fi network data.","title":"Creating a Project"},{"location":"start/esp-pio/#connecting-to-your-cloud4rpi-account","text":"Log in to your Cloud4RPi account or create a new one . Copy your device 's Device Token . You can create a device on the Devices page and copy its Device Token if you do not have one. Replace the __YOUR_DEVICE_TOKEN__ string with your device token.","title":"Connecting to Your Cloud4RPi Account"},{"location":"start/esp-pio/#running","text":"Hit the Build button and wait until the compilation is completed. Hit the Upload button. If the upload fails, try to start the board in the flashing mode (connect the power supply with the GPIO0 pin connected to GND) and try uploading again. Once flashing is complete, open Serial Monitor to monitor the device's status. Notice that the device on the Devices page went online and started sending data. Go to the Control Panels page and add a new control panel. Add a new Switch widget and bind it to the LED On variable. Add a new Text widget and bind it to the State variable. Configure different colors for the \"IDLE\" , \"RING\" and \"BOOM!\" strings. Add a new Slider widget and bind it to the DesiredTemp variable, set its minimum value to 10 and maximum value to 30. Add a new Gauge widget and bind it to the DesiredTemp variable, set its minimum value to 10 and maximum value to 30.","title":"Running"},{"location":"start/esp-pio/#video","text":"","title":"Video"},{"location":"start/esp8266-upy/","text":"Connecting an ESP8266 Follow the instructions below to connect your device to the Cloud4RPi control panel. Prerequisites Your ESP8266 module should have at least 1Mbyte of flash storage to install the full version of MicroPython. Flash the latest version of MicroPython using the official manual . Connect to your Wi-Fi network: >>> from network import WLAN >>> STA = WLAN(0); STA.active(1) >>> STA.connect('__SSID__', '__PASSWORD__') >>> STA.ifconfig() # Outputs the network configuration. If it is not valid, wait and re-execute Configure WebREPL for easier file uploading. >>> import webrepl_setup Connect to the ESP8266 via WebREPL . Getting Libraries and Examples Download the required source code files to your computer: simple.py : MQTT Library for MicroPython. Save this file as mqtt.py when downloading. cloud4rpi.py : Cloud4RPi client library for MicroPython. main.py : Sample code. Hacking Together some Code Open the main.py file in a text editor (for instance, Visual Studio Code ) and replace the following strings: __SSID__ with your Wi-Fi network name. __PWD__ with your Wi-Fi network password. If you have an open network, remove the '__PWD__' element without removing the trailing comma so that the WIFI_SSID_PASSWORD variable becomes a tuple with one element. __YOUR_DEVICE_TOKEN__ with the token displayed at the top of the device page on cloud4rpi.io . If you have no token yet, open the Devices page, create a device using the New Device button in the top right corner, and use its token. Save the file. The LED & Button Example's Hardware Connect the LED to GPIO12 and a button to GPIO16 . If you need to use other pins, change the corresponding variables in main.py . Running Upload three files ( mqtt.py , cloud4rpi.py and main.py ) to your ESP8266 via the WebREPL . Reset the ESP8266. You can use the console for this: >>> import machine >>> machine.reset() Check that the device goes online and starts sending data. Go to the Control Panels page and add a new control panel. Add a new Switch widget and bind it to the LED variable. Add a new Text widget and bind it to the Button variable. Configure different colors for the \"true\" and \"false\" strings. Press the hardware button and notice the changes on the control panel. Use the LED switch on the control panel to light the hardware LED. Explore the code of the main.py file and adapt it for your needs. Feel free to share your projects and ideas with us!","title":"MicroPython"},{"location":"start/esp8266-upy/#connecting-an-esp8266","text":"Follow the instructions below to connect your device to the Cloud4RPi control panel.","title":"Connecting an ESP8266"},{"location":"start/esp8266-upy/#prerequisites","text":"Your ESP8266 module should have at least 1Mbyte of flash storage to install the full version of MicroPython. Flash the latest version of MicroPython using the official manual . Connect to your Wi-Fi network: >>> from network import WLAN >>> STA = WLAN(0); STA.active(1) >>> STA.connect('__SSID__', '__PASSWORD__') >>> STA.ifconfig() # Outputs the network configuration. If it is not valid, wait and re-execute Configure WebREPL for easier file uploading. >>> import webrepl_setup Connect to the ESP8266 via WebREPL .","title":"Prerequisites"},{"location":"start/esp8266-upy/#getting-libraries-and-examples","text":"Download the required source code files to your computer: simple.py : MQTT Library for MicroPython. Save this file as mqtt.py when downloading. cloud4rpi.py : Cloud4RPi client library for MicroPython. main.py : Sample code.","title":"Getting Libraries and Examples"},{"location":"start/esp8266-upy/#hacking-together-some-code","text":"Open the main.py file in a text editor (for instance, Visual Studio Code ) and replace the following strings: __SSID__ with your Wi-Fi network name. __PWD__ with your Wi-Fi network password. If you have an open network, remove the '__PWD__' element without removing the trailing comma so that the WIFI_SSID_PASSWORD variable becomes a tuple with one element. __YOUR_DEVICE_TOKEN__ with the token displayed at the top of the device page on cloud4rpi.io . If you have no token yet, open the Devices page, create a device using the New Device button in the top right corner, and use its token. Save the file.","title":"Hacking Together some Code"},{"location":"start/esp8266-upy/#the-led-button-examples-hardware","text":"Connect the LED to GPIO12 and a button to GPIO16 . If you need to use other pins, change the corresponding variables in main.py .","title":"The LED &amp; Button Example's Hardware"},{"location":"start/esp8266-upy/#running","text":"Upload three files ( mqtt.py , cloud4rpi.py and main.py ) to your ESP8266 via the WebREPL . Reset the ESP8266. You can use the console for this: >>> import machine >>> machine.reset() Check that the device goes online and starts sending data. Go to the Control Panels page and add a new control panel. Add a new Switch widget and bind it to the LED variable. Add a new Text widget and bind it to the Button variable. Configure different colors for the \"true\" and \"false\" strings. Press the hardware button and notice the changes on the control panel. Use the LED switch on the control panel to light the hardware LED. Explore the code of the main.py file and adapt it for your needs. Feel free to share your projects and ideas with us!","title":"Running"},{"location":"start/o2/","text":"Connecting an Omega2 Board Follow the instructions below to connect your device to the Cloud4RPi control panel. Prerequisites Install/update the required packages. opkg update opkg install wget python3 python3-pip pip3 install --upgrade setuptools pip You can use alternative methods to install pip . Note The Cloud4RPi library is compatible with Python 3.2+ and Python 2.7.9+ versions. Getting the Cloud4RPi Client Library Install the library using your preferred Python version. The following command installs and integrates Cloud4RPi with your OS's default Python interpreter (usually Python 3): pip3 install cloud4rpi Hacking Together some Code We have prepared sample code for several platforms in the cloud4rpi-omega2-python repository to demonstrate sending data to the Cloud. Get Cloud4RPi examples for your device: mkdir cloud4rpi-omega2-python && cd cloud4rpi-omega2-python repo=\"https://raw.githubusercontent.com/cloud4rpi/cloud4rpi-omega2-python/master\" wget \"$repo/omega2.py\" \"$repo/control.py\" Note You can install git if your board has sufficient memory and you prefer using it, and clone this repository with the following command: opkg install git git-http ca-bundle && git clone https://github.com/cloud4rpi/cloud4rpi-omega2-python.git && cd cloud4rpi-omega2-python Before running a sample ( control.py ), remember to replace the __YOUR_DEVICE_TOKEN__ string with your real device token. Use a text editor (for instance, vim ) to replace __YOUR_DEVICE_TOKEN__ with the token displayed at the top of the device page on cloud4rpi.io . If you have no token yet, open the Devices page, create a device using the New Device button in the top right corner, and use its token. Running Execute the script with a Python interpreter, for example: python3 control.py Note If you have installed Cloud4RPi to a non-default Python, use the version with the Cloud4RPi library. If the script output looks right, open the Devices page to see if the device status has changed.","title":"Omega2"},{"location":"start/o2/#connecting-an-omega2-board","text":"Follow the instructions below to connect your device to the Cloud4RPi control panel.","title":"Connecting an Omega2 Board"},{"location":"start/o2/#prerequisites","text":"Install/update the required packages. opkg update opkg install wget python3 python3-pip pip3 install --upgrade setuptools pip You can use alternative methods to install pip . Note The Cloud4RPi library is compatible with Python 3.2+ and Python 2.7.9+ versions.","title":"Prerequisites"},{"location":"start/o2/#getting-the-cloud4rpi-client-library","text":"Install the library using your preferred Python version. The following command installs and integrates Cloud4RPi with your OS's default Python interpreter (usually Python 3): pip3 install cloud4rpi","title":"Getting the Cloud4RPi Client Library"},{"location":"start/o2/#hacking-together-some-code","text":"We have prepared sample code for several platforms in the cloud4rpi-omega2-python repository to demonstrate sending data to the Cloud. Get Cloud4RPi examples for your device: mkdir cloud4rpi-omega2-python && cd cloud4rpi-omega2-python repo=\"https://raw.githubusercontent.com/cloud4rpi/cloud4rpi-omega2-python/master\" wget \"$repo/omega2.py\" \"$repo/control.py\" Note You can install git if your board has sufficient memory and you prefer using it, and clone this repository with the following command: opkg install git git-http ca-bundle && git clone https://github.com/cloud4rpi/cloud4rpi-omega2-python.git && cd cloud4rpi-omega2-python Before running a sample ( control.py ), remember to replace the __YOUR_DEVICE_TOKEN__ string with your real device token. Use a text editor (for instance, vim ) to replace __YOUR_DEVICE_TOKEN__ with the token displayed at the top of the device page on cloud4rpi.io . If you have no token yet, open the Devices page, create a device using the New Device button in the top right corner, and use its token.","title":"Hacking Together some Code"},{"location":"start/o2/#running","text":"Execute the script with a Python interpreter, for example: python3 control.py Note If you have installed Cloud4RPi to a non-default Python, use the version with the Cloud4RPi library. If the script output looks right, open the Devices page to see if the device status has changed.","title":"Running"},{"location":"start/rpi/","text":"Connecting a Raspberry Pi Board Follow the instructions below to connect your device to the Cloud4RPi control panel. Prerequisites It is advisable to update your system before installing. sudo apt update && sudo apt upgrade -y Install/update the required packages. sudo apt install git python3 python3-pip -y You can use alternative methods to install pip . Note The Cloud4RPi library is compatible with Python 3.2+ and Python 2.7.9+ versions. [Optional] Enable interfaces Run sudo raspi-config Open a section for configuring additional interfaces ( Advanced Options or Interfacing Options | Configure connections to peripherals depending on the version). Enable I2C, 1-wire and other necessary interfaces. Choose <Finish> . Reboot the device with the sudo reboot command. Getting the Cloud4RPi Client Library Install the library using your preferred Python version. The following command installs and integrates Cloud4RPi with your OS's default Python interpreter (usually Python 3): sudo pip3 install cloud4rpi If you are using Python 2, use the following command: sudo python2 -m pip install cloud4rpi Note For information on how to work with several versions of Python installed, see Python Documentation . If you get an error while using pip , try to update the setuptools and pip packages. sudo pip3 install --upgrade setuptools pip Hacking Together some Code We have prepared sample code for several platforms in the cloud4rpi-raspberrypi-python repository to demonstrate sending data to the Cloud. Get Cloud4RPi examples for your device: git clone https://github.com/cloud4rpi/cloud4rpi-raspberrypi-python.git && cd cloud4rpi-raspberrypi-python Before running a sample ( control.py ), remember to replace the __YOUR_DEVICE_TOKEN__ string with your real device token. Use a text editor (for instance, nano ) to replace __YOUR_DEVICE_TOKEN__ with the token displayed at the top of the device page on cloud4rpi.io . If you have no token yet, open the Devices page, create a device using the New Device button in the top right corner, and use its token. Running Execute the script with a Python interpreter, for example: sudo python3 control.py Note If you have installed Cloud4RPi to a non-default Python, use the version with the Cloud4RPi library. If the script output looks right, open the Devices page to see if the device status has changed. Installing as a Service You can use our service templates to facilitate service installation. Pass the path to your Cloud4RPi-enabled Python script to the service_install.sh script as a parameter. chmod +x service_install.sh sudo ./service_install.sh your_script.py Note You need to replace 'your_script.py' with the actual path to your service script. Video","title":"Raspberry Pi"},{"location":"start/rpi/#connecting-a-raspberry-pi-board","text":"Follow the instructions below to connect your device to the Cloud4RPi control panel.","title":"Connecting a Raspberry Pi Board"},{"location":"start/rpi/#prerequisites","text":"It is advisable to update your system before installing. sudo apt update && sudo apt upgrade -y Install/update the required packages. sudo apt install git python3 python3-pip -y You can use alternative methods to install pip . Note The Cloud4RPi library is compatible with Python 3.2+ and Python 2.7.9+ versions.","title":"Prerequisites"},{"location":"start/rpi/#optional-enable-interfaces","text":"Run sudo raspi-config Open a section for configuring additional interfaces ( Advanced Options or Interfacing Options | Configure connections to peripherals depending on the version). Enable I2C, 1-wire and other necessary interfaces. Choose <Finish> . Reboot the device with the sudo reboot command.","title":"[Optional] Enable interfaces"},{"location":"start/rpi/#getting-the-cloud4rpi-client-library","text":"Install the library using your preferred Python version. The following command installs and integrates Cloud4RPi with your OS's default Python interpreter (usually Python 3): sudo pip3 install cloud4rpi If you are using Python 2, use the following command: sudo python2 -m pip install cloud4rpi Note For information on how to work with several versions of Python installed, see Python Documentation . If you get an error while using pip , try to update the setuptools and pip packages. sudo pip3 install --upgrade setuptools pip","title":"Getting the Cloud4RPi Client Library"},{"location":"start/rpi/#hacking-together-some-code","text":"We have prepared sample code for several platforms in the cloud4rpi-raspberrypi-python repository to demonstrate sending data to the Cloud. Get Cloud4RPi examples for your device: git clone https://github.com/cloud4rpi/cloud4rpi-raspberrypi-python.git && cd cloud4rpi-raspberrypi-python Before running a sample ( control.py ), remember to replace the __YOUR_DEVICE_TOKEN__ string with your real device token. Use a text editor (for instance, nano ) to replace __YOUR_DEVICE_TOKEN__ with the token displayed at the top of the device page on cloud4rpi.io . If you have no token yet, open the Devices page, create a device using the New Device button in the top right corner, and use its token.","title":"Hacking Together some Code"},{"location":"start/rpi/#running","text":"Execute the script with a Python interpreter, for example: sudo python3 control.py Note If you have installed Cloud4RPi to a non-default Python, use the version with the Cloud4RPi library. If the script output looks right, open the Devices page to see if the device status has changed.","title":"Running"},{"location":"start/rpi/#installing-as-a-service","text":"You can use our service templates to facilitate service installation. Pass the path to your Cloud4RPi-enabled Python script to the service_install.sh script as a parameter. chmod +x service_install.sh sudo ./service_install.sh your_script.py Note You need to replace 'your_script.py' with the actual path to your service script.","title":"Installing as a Service"},{"location":"start/rpi/#video","text":"","title":"Video"}]}